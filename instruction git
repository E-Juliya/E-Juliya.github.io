## GIT INIT

Данная команда используется для иницилизации  нового репотозитория или для  иницилизации вновь существующего. При инициализации он создаст скрытую папку. В ней содержатся все объекты и ссылки, которые Git использует и создаёт в истории работы над проектом.

## GIT ADD

 Чтобы добавить отдельный файл в область подготовленных файлов используют команду git add с указанием имени файла. Если нужно добавить несколько файлов, чтобы каждый файл не прописывать можно использовать команду (git add .).

 ## GIT COMMIT
 
 Данная команда фиксирует  изменения. При создание коммита в репозитории можно добавить однострочное сообщение с помощью параметра commit с флагом -m. Само сообщение вводится непосредственно после флага, в кавычках.

 ## GIT STATUS

 Просмотреть статус нужного репозитория можно по ключевому слову status: его действие распространяется на подготовленные, неподготовленные и неотслеживаемые файлы.

## GIT LOG

Просматривать изменения, внесённые в репозиторий, можно с помощью параметра log. Он отображает список последних коммитов в порядке выполнения. Кроме того, добавив флаг -p, вы можете подробно изучить изменения, внесённые в каждый файл.

## GIT BRANCH

Создать новую ветку можно с помощью команды branch, указав имя ветки. Чтобы увидеть все ветки или посмотреть на какой ветки находишься используется команда git branch.
Удалить ветку можно командой branch с добавлением флага -d и указанием имени ветки. Если вы завершили работу над веткой и объединили её с основной, можно её удалить без потери истории. Однако, если выполнить команду удаления до слияния — в результате появится сообщение об ошибке. Этот защитный механизм предотвращает потерю доступа к файлам.

## GIT MERGE

Объединить две ветки можно параметром merge с указанием имени ветки. Команда объединит указанную ветку с основной.

## УДАЛЕННЫЙ РЕПОЗИТОРИЙ

## GIT CLONE
Позволяет клонировать удаленный репозиторий.

## GIT PULL
Получает изменения из переданного удаленного репозитория и обновляет рабочую копию в соответствии с удаленным репозиторием. 

## GIT PUSH

Когда вы хотите поделиться своими наработками, вам необходимо отправить их в удалённый репозиторий. Команда для этого действия простая: git push <remote-name> <branch-name>. Чтобы отправить вашу ветку master на сервер origin (повторимся, что клонирование обычно настраивает оба этих имени автоматически), вы можете выполнить следующую команду для отправки ваших коммитов:

## work and pull request

Форк (от англ. fork – вилка) – точная копия репозитория, но в вашем аккаунте. Форки нужны, чтобы вносить свои изменения в проект, к репозиторию которого у вас нет прямого доступа.
Пулл-реквест (от англ. pull-request – запрос pull) – функция GitHub, позволяющая попросить владельца репозитория, от которого мы сделали форк, загрузить наши изменения обратно в свой репозиторий.